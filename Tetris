<!DOCTYPE html>
<html>
<head>
  <title>Ben's W.I.P Tetris</title>
  <meta charset="UTF-8">
  <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
  <script src="tetris.js"></script>
  <link rel="stylesheet" href="tetris.css"> 
  <style>
  html, body {
    height: 100%;
    margin: 0;
  }
  
  body {
    font-family: 'VT323', monospace;
    background: #9bbc0f;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  canvas {
  border: 10px solid black;
  }

  #score-container {
    width: 320px;
    background: #1c1c1c;
    border: 4px black;
    padding: 10px;
    box-sizing: border-box;
    margin-bottom: 12px;
    text-align: center;
  }

  #scoreboard {
    font-family: 'VT323', monospace;
    font-size: 48px;
    color: solid black;
  }
  
  #game-over-message {
  font-family: 'VT323', monospace;
  font-size: 24px;
  font-weight: bold;
  color: red;
  text-align: center;
  margin-top: 20px;
  display: none;
  }
  
  #game-wrapper {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  gap: 20px;
  }
</style>
</head>
<body>
  <canvas width="320" height="640" id="game"></canvas>
  <div id="game-over-message"></div>
  <div id="scoreboard">Score: 0</div>
  <audio controls autoplay loop hidden>
  <source src="Tetris.mp3" type="audio/mpeg">
  </audio>
  <button style="height: 50px; width: 300px" id="restartButton">Restart</button>
  <script>
    const canvas = document.getElementById('game');
    const context = canvas.getContext('2d');
    const grid = 32;

    const tetrominos = {
      'I': [[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],
      'J': [[1,0,0],[1,1,1],[0,0,0]],
      'L': [[0,0,1],[1,1,1],[0,0,0]],
      'O': [[1,1],[1,1]],
      'S': [[0,1,1],[1,1,0],[0,0,0]],
      'Z': [[1,1,0],[0,1,1],[0,0,0]],
      'T': [[0,1,0],[1,1,1],[0,0,0]]
    };

    const colors = {
      'I': 'cyan',
      'O': 'yellow',
      'T': 'purple',
      'S': 'green',
      'Z': 'red',
      'J': 'blue',
      'L': 'orange'
    };

    const playfield = [];
    for (let row = -2; row < 20; row++) {
      playfield[row] = new Array(10).fill(0);
    }

    let score = 0;
    let tetromino = null;
    let tetrominoSequence = [];
    let rAF = null;
    let gameOver = false;
    let count = 0;
    let dropDistance = 0;

    function updateScore(lines) {
      const linePoints = [0, 40, 100, 300, 1200];
      score += linePoints[lines];
      document.getElementById('scoreboard').textContent = `Score: ${score}`;
    }

    function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function generateSequence() {
      const sequence = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];
      while (sequence.length) {
        const rand = getRandomInt(0, sequence.length - 1);
        const name = sequence.splice(rand, 1)[0];
        tetrominoSequence.push(name);
      }
    }

    function getNextTetromino() {
      if (tetrominoSequence.length === 0) {
        generateSequence();
      }

      const name = tetrominoSequence.pop();
      const matrix = tetrominos[name];
      const col = Math.floor(playfield[0].length / 2 - Math.ceil(matrix[0].length / 2));
      const row = name === 'I' ? -1 : -2;

      return { name, matrix, row, col };
    }

    function rotate(matrix) {
      const N = matrix.length - 1;
      return matrix.map((row, i) =>
        row.map((_, j) => matrix[N - j][i])
      );
    }

    function isValidMove(matrix, cellRow, cellCol) {
      for (let row = 0; row < matrix.length; row++) {
        for (let col = 0; col < matrix[row].length; col++) {
          if (matrix[row][col]) {
            if (
              cellCol + col < 0 ||
              cellCol + col >= playfield[0].length ||
              cellRow + row >= playfield.length ||
              playfield[cellRow + row]?.[cellCol + col]
            ) {
              return false;
            }
          }
        }
      }
      return true;
    }

    function placeTetromino() {
      for (let row = 0; row < tetromino.matrix.length; row++) {
        for (let col = 0; col < tetromino.matrix[row].length; col++) {
          if (tetromino.matrix[row][col]) {
            if (tetromino.row + row < 0) {
              return showGameOver();
            }
            playfield[tetromino.row + row][tetromino.col + col] = tetromino.name;
          }
        }
      }

      let linesCleared = 0;

      for (let row = playfield.length - 1; row >= 0;) {
        if (playfield[row].every(cell => !!cell)) {
          for (let r = row; r >= 0; r--) {
            for (let c = 0; c < playfield[r].length; c++) {
              playfield[r][c] = playfield[r - 1]?.[c] || 0;
            }
          }
          linesCleared++;
        } else {
          row--;
        }
      }

      if (linesCleared > 0) {
        updateScore(linesCleared);
      }

      tetromino = getNextTetromino();
    }

    function showGameOver() {
    cancelAnimationFrame(rAF);
    gameOver = true;

    const messageEl = document.getElementById('game-over-message');
    messageEl.textContent = 'GAME OVER!';
    messageEl.style.display = 'block';
    }

    function loop() {
      rAF = requestAnimationFrame(loop);
      context.clearRect(0, 0, canvas.width, canvas.height);

      for (let row = 0; row < 20; row++) {
        for (let col = 0; col < 10; col++) {
          if (playfield[row][col]) {
            const name = playfield[row][col];
            context.fillStyle = colors[name];
            context.fillRect(col * grid, row * grid, grid - 1, grid - 1);
          }
        }
      }

      if (tetromino) {
        if (++count > 40) {
          tetromino.row++;
          count = 0;

          if (!isValidMove(tetromino.matrix, tetromino.row, tetromino.col)) {
            tetromino.row--;
            placeTetromino();
           } else {
           score++;
           document.getElementById('scoreboard').textContent = `Score: ${score}`;
          }
        }

        context.fillStyle = colors[tetromino.name];
        for (let row = 0; row < tetromino.matrix.length; row++) {
          for (let col = 0; col < tetromino.matrix[row].length; col++) {
            if (tetromino.matrix[row][col]) {
              context.fillRect(
                (tetromino.col + col) * grid,
                (tetromino.row + row) * grid,
                grid - 1,
                grid - 1
              );
            }
          }
        }
      }
    }

    document.addEventListener('keydown', function(e) {
      if (gameOver) return;
      
      if (e.code === 'Space') 
      {while (isValidMove(tetromino.matrix, tetromino.row + 1, tetromino.col)) {
      tetromino.row++;
      dropDistance++;
      }
      score += dropDistance * 2;
      document.getElementById('scoreboard').textContent = `Score: ${score}`;
      placeTetromino();
      }
      if (e.which === 37 || e.which === 39) {
        const col = e.which === 37
          ? tetromino.col - 1
          : tetromino.col + 1;
        if (isValidMove(tetromino.matrix, tetromino.row, col)) {
          tetromino.col = col;
        }
      }

      if (e.which === 38) {
        const matrix = rotate(tetromino.matrix);
        if (isValidMove(matrix, tetromino.row, tetromino.col)) {
          tetromino.matrix = matrix;
        }
      }

      if (e.which === 40) {
        const row = tetromino.row + 1;
        if (!isValidMove(tetromino.matrix, row, tetromino.col)) {
          tetromino.row = row - 1;
          placeTetromino();
          return;
        }
        tetromino.row = row;
        score += 1;
        document.getElementById('scoreboard').textContent = `Score: ${score}`; 
      }
    });
    tetromino = getNextTetromino();
    loop();
<!--Chat-GPT-->
    document.getElementById('restartButton').addEventListener('click', function() {
        window.location.reload();
    });
  </script>
</body>
</html> 

